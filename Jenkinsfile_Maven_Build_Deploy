/*
- This Jenkinsfile will create a maven build, archive the artifacts, and use Deploy to Container Plugin to deploy artifacts on Webserver as per SDLC Environment.
Validate details in the Jenkinsfile for : Webserver Path,Credentials ID.
Make sure below Apache Tomcate Web Servers are already setup for SDLC Environments.
*/

pipeline {
    agent any
    tools {
        maven 'Maven_Local'
    }
    parameters {
        string(name: 'SDLC_ENV', defaultValue: '', description: 'Enter SDLC Environment')
    }
    stages {
        stage('Build') {
            steps {
                echo 'Building..'
                echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
                dir("${env.WORKSPACE}/"){
                    sh "mvn clean install --file pom.xml"
                }
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
                echo "${params.SDLC_ENV} is value retrieved!"
            }
        }
        stage('DeployToDev') {
            when {
                environment name: 'SDLC_ENV', value: 'dev'
            }
            steps {
                deploy adapters: [tomcat9(credentialsId: 'tomcat_login_info', path: '', url: 'http://172.31.32.17:8080/')], contextPath: 'dev-jenkins-files-tomcat-run', war: '**/*.war'
            }
        }
        stage('DeployToQa') {
            when {
                environment name: 'SDLC_ENV', value: 'qa'
            }
            steps {
                deploy adapters: [tomcat9(credentialsId: 'tomcat_login_info', path: '', url: 'http://172.31.32.17:8080/')], contextPath: 'qa-jenkins-files-tomcat-run', war: '**/*.war'
            }
        }
        stage('DeployToProd') {
            when {
                environment name: 'SDLC_ENV', value: 'prod'
            }
            steps {
                deploy adapters: [tomcat9(credentialsId: 'tomcat_login_info', path: '', url: 'http://172.31.32.17:8080/')], contextPath: 'prod-jenkins-files-tomcat-run', war: '**/*.war'
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: '**/*.war', fingerprint: true
        }
    }
}
